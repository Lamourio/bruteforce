{"version":3,"sources":["components/NavBar.js","components/Definition.js","components/Exemple.js","components/TypeOfBruteForce.js","components/Protection.js","components/Attacks.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","exact","to","Definition","Container","style","textAlign","Image","maxHeight","margin","display","src","process","fluid","clicked","Exemple","useState","password","setPassword","passwordLength","setPasswordLength","alphabetLength","numberOfTries","setNumberOfTries","printAfter","setPrintAfter","toString","startFrom","setStartFrom","setThing","calculating","setCalculating","timeEllpased","setTimeEllpased","counter","setCounter","Form","noValidate","Row","Group","as","Col","md","controlId","Label","Control","required","type","placeholder","value","onInput","e","target","toLowerCase","Text","muted","pattern","parseInt","string","RegExp","test","readOnly","rows","marginBottom","Button","onClick","console","log","textAria","document","getElementById","from","arr","start","Date","now","cb","i","count","setTimeout","havyTask","next","guess","push","ellapsedTime","alert","Spinner","animation","variant","Accordion","defaultActiveKey","Card","Toggle","Header","eventKey","Collapse","Body","ListGroup","ListGroupItem","Math","pow","TypeOfBruteForce","href","Protection","Item","Attacks","fontWeight","Tab","id","sm","action","Content","Pane","App","basename","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9dd6ca87.chunk.js","sourcesContent":["import {NavLink} from 'react-router-dom';\r\nfunction NavBar() {\r\n    return (\r\n        <nav className=\"navBar\">\r\n        <ul>\r\n            <li><NavLink exact to=\"/\">Definition</NavLink></li>\r\n            <li><NavLink to=\"/Types/\">Types</NavLink></li>\r\n            <li><NavLink to=\"/attacks/\">Attacks</NavLink></li>\r\n            <li><NavLink to=\"/protection/\">Protection</NavLink></li>\r\n            <li><NavLink to=\"/example/\">Exemple</NavLink></li>\r\n        </ul>\r\n        </nav>\r\n    );\r\n  }\r\n  \r\n  export default NavBar;","import { Container,Image} from 'react-bootstrap';\r\nfunction Definition() {\r\n    return (\r\n        <Container>\r\n            <h1 style={{textAlign:\"center\"}}>Definition</h1>\r\n            <p>\r\n                In the world of Hackers, Brute Force attack is defined as a repetitive successive\r\n                attempts of trying various password to break into the website.\r\n                This attack will be vigorously done by hackers to login into the website.\r\n                Hackers use bots to automate this process.\r\n                The bots will be installed in various computers in a malicious way and it will be used for the attacks to make it in an efficient way.\r\n            </p>\r\n            <Image style={{maxHeight : \"50vh\",margin:\"10px auto\",display:\"block\"}} src={process.env.PUBLIC_URL+\"/bruteForceill.png\"} fluid></Image>\r\n            <p>\r\n                Sometimes, brute force attacks are still done by hand, meaning that there’s an actual person sitting in some basement and playing a guessing game with your credentials. But, more often than not these days, the hackers use a brute force algorithm, or brute force password cracker, which is, basically,\r\n                a bot that submits infinite variations of username/password combination and notifies the hacker when it gets in.\r\n            </p>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Definition;","import { useState } from \"react\"\r\nimport { Col, Form, Button, Container, Accordion, Card, Row, ListGroup, ListGroupItem,Spinner} from 'react-bootstrap';\r\n\r\nlet intStartFrom = 500000000;\r\nlet clicked = false ;\r\nfunction havyTask(from,to,cb) {\r\n    let i = from ;\r\n    function count () {\r\n        do {\r\n            if(cb(i,true)) {\r\n                return true\r\n            }\r\n            i++;\r\n          } while (i % 10000 !== 0 && i < to);\r\n        if(i < to) setTimeout(count);\r\n        else return cb(i,false) ;\r\n    }\r\n    return count ;\r\n    \r\n};\r\nfunction clsAlphaNoOnly(string) {  // Accept only alpha numerics, no special characters \r\n    var regex = new RegExp(\"^[a-zA-Z0-9 ]+$\");\r\n\r\n    if (regex.test(string)) {\r\n        return true;\r\n    }\r\n    if (string === \"\") {\r\n        return true\r\n    }\r\n    return false;\r\n}\r\nlet array = []\r\nfunction Exemple() {\r\n    const [password, setPassword] = useState('89p8zk');\r\n    const [passwordLength, setPasswordLength] = useState(4);\r\n    const [alphabetLength, setAlphabetLength] = useState(36);\r\n    const [numberOfTries, setNumberOfTries] = useState(30000);\r\n    const [printAfter, setPrintAfter] = useState(2000);\r\n    const [startFrom, setStartFrom] = useState(intStartFrom.toString(alphabetLength));\r\n    const [thing, setThing] = useState([]);\r\n    const [calculating, setCalculating] = useState(false);\r\n    const [timeEllpased, setTimeEllpased] = useState(\"\");\r\n    const [counter, setCounter] = useState(0);\r\n\r\n    function bruteForce() {\r\n        if(clicked) {\r\n            console.log(\"calculating try again later \");\r\n            return ;\r\n        };\r\n        const textAria = document.getElementById(\"idTextAria\");\r\n        clicked = true ;\r\n        setCalculating(true);\r\n        let from = parseInt(startFrom, 36);\r\n        let to = numberOfTries - 1 + parseInt(startFrom, 36) ;\r\n        let arr = [];\r\n        let string = \"\"\r\n        setThing(arr);\r\n        setTimeEllpased(\"\");\r\n        let start = Date.now();\r\n        havyTask(from,to ,(i,next)=> {\r\n            const guess = i.toString(alphabetLength);\r\n            arr.push(guess);\r\n            string += `+ ${guess} `;\r\n            if (i % printAfter === 0) {\r\n                setCounter( i - from ) ;\r\n                textAria.value += string;\r\n                string = \"\" ;\r\n                \r\n            }\r\n            if( password == guess) {\r\n                setThing(arr);\r\n                setCounter( i - from ) ;\r\n                textAria.value += string;\r\n                string = \"\" ;\r\n                console.log(\"Found\",guess);\r\n                let ellapsedTime = Date.now() - start;\r\n                setTimeEllpased(ellapsedTime);\r\n                setCalculating(false);\r\n                clicked = false ;\r\n                alert(\"timeEllased \"+ ellapsedTime)\r\n                alert(\"password found \"+ guess) ;\r\n                return true ;\r\n            }\r\n            if(next === false) {\r\n                console.log(\"not Found\");\r\n                setCounter( i - from + 1) ;\r\n                textAria.value += string;\r\n                string = \"\" ;\r\n                let ellapsedTime = Date.now() - start;\r\n                setTimeEllpased(ellapsedTime);\r\n                setCalculating(false);\r\n                clicked = false ;\r\n                setThing(arr);\r\n                alert(\"timeEllased \"+ ellapsedTime)\r\n                alert(\"password not found\") ;\r\n            }\r\n\r\n            \r\n        })();\r\n\r\n\r\n    }\r\n   \r\n    \r\n\r\n    return (\r\n\r\n        <Container>\r\n            <h1 style={{textAlign:\"center\"}}>live exemple :</h1>\r\n            <Form noValidate >\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\r\n                        <Form.Label>password</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            placeholder=\"password\"\r\n                            value={password}\r\n                            onInput={(e) => setPassword(e.target.value.toLowerCase())} />\r\n\r\n                        <Form.Text muted>Password to guess</Form.Text>\r\n\r\n\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\r\n                        <Form.Label>passwordLength :</Form.Label>\r\n                        <Form.Control\r\n                            pattern=\"[0-9]*\"\r\n                            required\r\n                            type=\"text\"\r\n                            placeholder=\"passwordLength\"\r\n                            onInput={(e) => setPasswordLength(parseInt(e.target.value) ? parseInt(e.target.value) : 0)}\r\n                            value={passwordLength}\r\n\r\n                        />\r\n                        <Form.Text muted>passwordLength Only used to calculate complexity</Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustomUsername\">\r\n                        <Form.Label>printAfter</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            required\r\n                            placeholder=\"printAfter\"\r\n                            onInput={(e) => setPrintAfter(parseInt(e.target.value) ? parseInt(e.target.value) : 0)}\r\n                            value={printAfter}\r\n                        />\r\n                        <Form.Text muted>Used for performance. print tried password every {printAfter} instruction.</Form.Text>\r\n\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n\r\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationCustom03\">\r\n                        <Form.Label>numberOfTries</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"numberOfTries\"\r\n                            required\r\n\r\n                            value={numberOfTries}\r\n                            onInput={(e) => setNumberOfTries(parseInt(e.target.value) ? parseInt(e.target.value) : 0)}\r\n                        />\r\n                        <Form.Text muted>Only {numberOfTries} iteration will be executed</Form.Text>\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationCustom04\">\r\n                        <Form.Label>StartFrom</Form.Label>\r\n                        <Form.Control\r\n                            value={startFrom}\r\n                            onInput={(e) => clsAlphaNoOnly(e.target.value) ? setStartFrom(e.target.value === \"\" ? \"0\" : e.target.value.toLowerCase()) : startFrom}\r\n                            type=\"text\"\r\n                            placeholder=\"State\"\r\n                            required />\r\n                        <Form.Text muted>start searching from {startFrom}</Form.Text>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\" controlId=\"idTextAria\">\r\n                        <Form.Label>Guesses: {counter} </Form.Label>\r\n                        <Form.Control readOnly as=\"textarea\" rows={6} />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                {/* <Button type=\"submit\">Submit form</Button> */}\r\n\r\n            </Form>\r\n\r\n\r\n            <Row className=\"justify-content-md-center\" style={{ marginBottom: \"10px\" }}>\r\n                <Col md=\"auto\">\r\n                    <Button onClick={bruteForce}>\r\n                        {calculating ? <Spinner animation=\"border\" variant=\"info\" /> : \"Brute Force\" }\r\n                    </Button>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Accordion defaultActiveKey=\"0\">\r\n                        <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                                Information\r\n                    </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    <ListGroup className=\"list-group-flush\">\r\n                                        <ListGroupItem>Number of required tries in worst case for this exemple (36 character): {Math.pow(passwordLength, alphabetLength)}</ListGroupItem>\r\n                                        <ListGroupItem>TimeEllapsed : {timeEllpased == \"\" ? \"\" : `${timeEllpased}ms` }</ListGroupItem>\r\n                                    </ListGroup>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion></Col>\r\n            </Row>\r\n\r\n        </Container>\r\n        // <div>\r\n        //     <span>\r\n        //         <label htmlFor=\"password\">password : </label>\r\n        //         <input id=\"password\" type=\"text\" onInput={(e) => setPassword(e.target.value)} value={password} />\r\n        //     </span>\r\n        //     <span>\r\n        //         <label htmlFor=\"passwordLength\">passwordLength : </label>\r\n        //         <input id=\"passwordLength\" pattern=\"[0-9]*\" type=\"text\" onInput={(e) => setPasswordLength(parseInt(e.target.value) ? parseInt(e.target.value) : 0)} value={passwordLength} />\r\n        //     </span>\r\n\r\n        //     <span>\r\n        //         <label htmlFor=\"printAfter\">printAfter : </label>\r\n        //         <input id=\"printAfter\" pattern=\"[0-9]*\" type=\"text\" onInput={(e) => setPrintAfter(parseInt(e.target.value) ? parseInt(e.target.value) : 0)} value={printAfter} />\r\n        //     </span>\r\n        //     <span>\r\n        //         <label htmlFor=\"numberOfTries\">numberOfTries : </label>\r\n        //         <input id=\"numberOfTries\" type=\"text\" onInput={(e) => setNumberOfTries(parseInt(e.target.value) ? parseInt(e.target.value) : 0)} value={numberOfTries} />\r\n        //     </span>\r\n        //     <span>\r\n        //         <label htmlFor=\"startFrom\">startFrom : </label>\r\n        //         <input  id=\"startFrom\" type=\"text\" onInput={(e) => clsAlphaNoOnly(e.target.value) ? setStartFrom(e.target.value === \"\" ? \"0\" : e.target.value) : startFrom} value={startFrom} />\r\n\r\n        //     </span>\r\n\r\n        //     {/* <label htmlFor=\"password\">password : </label>\r\n        //     <input id=\"password\" type=\"text\" onInput={(e)=> setPassword(e.target.value)} value={password} />\r\n        //     <br></br> */}\r\n\r\n        //     <fieldset style={{ display: \"flex\", width: \"80vw\", flexWrap: \"wrap\", margin: \"30px auto\", overflow: \"scroll\", height: \"30vh\" }}>\r\n        //         <legend>Guesses:</legend>\r\n        //         {thing.map(el => <span className=\"guess\" key={el}>{el}</span>)}\r\n        //     </fieldset>\r\n        //     <button onClick={() => {startCount();}}>calculate</button>\r\n        //     <button onClick={() => setCalculating(false) }>stop</button>\r\n        // </div>\r\n    );\r\n}\r\n\r\nexport default Exemple;","import { Container } from 'react-bootstrap';\r\nfunction TypeOfBruteForce() {\r\n    return (\r\n        <Container>\r\n            <h1 style={{ textAlign: \"center\" }}>Types</h1>\r\n\r\n            <h4>1. Simple brute force attack</h4>\r\n            <p>During a simple attack, as a rule, various methods are used to select your passwords and logins. Most often, this type of attack is used to crack local files, because there are no restrictions on the number of attempts.</p>\r\n\r\n\r\n            <h4>2. Dictionary brute force attack</h4>\r\n            <p>During a dictionary attack, hackers do not randomly select a password and login but use a special dictionary of the most common passwords. For example, they enter such common phrases as \"admin,\" \"welcome,\" etc.</p>\r\n\r\n            <h4>3. Hybrid brute force attack</h4>\r\n            <p>A hybrid brute force attack is a mix of various types with the aim of gaining access to your data. Such an attack combines both dictionary and simple attacks.</p>\r\n\r\n            <h4>4. Credential stuffing</h4>\r\n            <p>During <a href=\"https://www.comparitech.com/blog/information-security/credential-stuffing-attacks/\" target=\"_black\">credential stuffing</a> , hackers crack your site with passwords and logins that have already appeared somewhere. Often users put the same password and login on all social networks and other accounts. Accordingly, if hackers break into one website, then they can easily break others.</p>\r\n\r\n\r\n\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TypeOfBruteForce;","import { Col, Form, Button, Container, Accordion, Card, Row, ListGroup, ListGroupItem,Spinner} from 'react-bootstrap';\r\nfunction Protection() {\r\n    return (\r\n        <Container>\r\n        <h1 style={{textAlign:\"center\"}}>protect your self</h1>    \r\n        <h4>1. Use stronger passwords</h4>\r\n        <p>The easiest and most effective way to prevent the loss of your data is to create a strong password.\r\n\r\nA strong password will be difficult to break if it is:\r\n\r\nunique to each new site\r\ndoes not contain keywords for your area that can be guessed\r\nconsist of a large number of characters, the bigger, the better\r\nwill contain not only letters but also numbers and signs</p>\r\n\r\n<h4>2. Limit number of login attempts</h4>\r\n<p>Another way to prevent hacker attacks would be to establish a limited amount of data entry. As we have already mentioned, brute force attacks occur through continuous data selection. Therefore, this method can help a lot.\r\n\r\nyou can set 5 attempts to enter data\r\nyou can allow someone to resuming attempts after confirming the owner’s mail</p>\r\n<h3>3. Use  CAPTCHAs</h3>\r\n<p> CAPTCHAs help distinguish between spam computers and real users. We are not saying that CAPTCHAs are a reliable way to prevent data theft. However, this is an excellent way to delay the time to get them.</p>\r\n\r\n<h4>4. Enforce two-factor authentication</h4>\r\n<p>Two-factor authentication is like a bulletproof vest. It uses a two-step process to login. Most often 2SV occurs through:</p>\r\n<ListGroup>\r\n  <ListGroup.Item>SMS code</ListGroup.Item>\r\n  <ListGroup.Item>email message</ListGroup.Item>\r\n  <ListGroup.Item>fingerprints</ListGroup.Item>\r\n  <ListGroup.Item>retina scans</ListGroup.Item>\r\n  <ListGroup.Item>face scans</ListGroup.Item>\r\n</ListGroup>\r\n<br></br>\r\n<h4>5. Monitor attempted logins</h4>\r\n<p>Monitoring login attempts is a good way to prevent your data from being stolen. If you notice that within a short time someone tried to enter your site a large number of times, then this should be a warning call.</p>\r\n\r\n\r\n\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Protection;","import { useState } from \"react\"\r\nimport { Col, Container, Tab, ListGroup, Row,Image } from 'react-bootstrap';\r\n\r\n\r\nfunction Attacks() {\r\n  return (\r\n    <Container>\r\n      <h1 style={{textAlign:\"center\"}}>Attacks world wide</h1>\r\n      <h5 style={{marginBottom :\"20px\",fontWeight:\"400\"}}>Brute force attacks take place all the time and there are many high-profile examples to speak of. We likely don’t even know about many bygone and ongoing attacks, but here are a few that have come to light in recent years:</h5>\r\n      <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\">\r\n        <Row>\r\n          <Col sm={4}>\r\n            <ListGroup>\r\n              <ListGroup.Item action href=\"#link1\">\r\n                Canadian Revenue Agency (CRA):\r\n        </ListGroup.Item>\r\n              <ListGroup.Item action href=\"#link2\">\r\n                Dunkin’ Donuts:\r\n        </ListGroup.Item>\r\n              <ListGroup.Item action href=\"#link3\">\r\n                Alibaba:\r\n        </ListGroup.Item>\r\n              <ListGroup.Item action href=\"#link4\">\r\n                Magento:\r\n        </ListGroup.Item>\r\n              <ListGroup.Item action href=\"#link5\">\r\n                Northern Irish Parliament:\r\n        </ListGroup.Item>\r\n              <ListGroup.Item action href=\"#link6\">\r\n                Firefox:\r\n        </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col sm={8}>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey=\"#link1\">\r\n                In August 2020, <a href=\"https://www.welivesecurity.com/2020/08/24/cyber-attacks-canada-revenue-agency-government/\" target=\"_blank\">a credential stuffing attack</a> resulted in the hacking of more than 11,000 accounts for the CRA and other government-related services.\r\n                <br></br>\r\n                <br></br>\r\n                <Image style={{display:\"block\",margin:\"0 auto\",maxHeight :\"50vh\"}} src={process.env.PUBLIC_URL+\"/CRA.png\"} fluid />\r\n            </Tab.Pane>\r\n              <Tab.Pane eventKey=\"#link2\">\r\n                The popular coffee franchise <a href=\"https://www.infosecurity-magazine.com/news/dunkin-donuts-parent-settles/\" target=\"_blank\">has been ordered to pay</a> hundreds of thousands of dollars in response to a 2015 incident where credential stuffing and brute force attacks were used to steal money through the chain’s mobile app and website.\r\n                <br></br>\r\n                <br></br>\r\n                <Image style={{display:\"block\",margin:\"0 auto\",maxHeight :\"50vh\"}} src={process.env.PUBLIC_URL+\"/dunkin_donuts.jpg\"} fluid />\r\n        </Tab.Pane>\r\n              <Tab.Pane eventKey=\"#link3\">\r\n                A <a href=\"https://www.infosecurity-magazine.com/news/massive-bruteforce-attack-on/\" target=\"_blank\">massive 2016 brute force attack</a> on the popular ecommerce site affected millions of accounts.\r\n                <br></br>\r\n                <br></br>\r\n                <Image style={{display:\"block\",margin:\"0 auto\",maxHeight :\"50vh\"}} src={process.env.PUBLIC_URL+\"/Alibaba.jpg\"} fluid />\r\n        </Tab.Pane>\r\n              <Tab.Pane eventKey=\"#link4\">\r\n                In March, 2018, <a href=\"https://esellercafe.com/magento-communicates-with-users-about-brute-force-attacks/\" target=\"_blank\">Magento had to warn users</a> that up to 1,000 admin panels had been compromised as a result of brute force attacks.\r\n                <br></br>\r\n                <br></br>\r\n                <Image style={{display:\"block\",margin:\"0 auto\",maxHeight :\"50vh\"}} src={process.env.PUBLIC_URL+\"/magento.png\"} fluid />\r\n        </Tab.Pane>\r\n              <Tab.Pane eventKey=\"#link5\">\r\n                Also in March, 2018, the <a href=\"https://www.hackread.com/northern-irish-parliament-hit-by-brute-force-attack/\" target=\"_blank\">accounts of several members</a> of the Northern Irish Parliament were accessed by brute force attackers.\r\n                <br></br>\r\n                <br></br>\r\n                <Image style={{display:\"block\",margin:\"0 auto\",maxHeight :\"50vh\"}} src={process.env.PUBLIC_URL+\"/North.svg\"} fluid  />\r\n        </Tab.Pane>\r\n              <Tab.Pane eventKey=\"#link6\">\r\n                It was <a href=\"https://palant.info/2018/03/10/master-password-in-firefox-or-thunderbird-do-not-bother/\" target=\"_blank\">revealed early in 2018 that Firefox’s</a> ‘master password’ feature can be easily brute-force attacked. This means that over the past nine years, many users’ credentials may have been exposed.\r\n                <br></br>\r\n                <br></br>\r\n                <Image style={{display:\"block\",margin:\"0 auto\",maxHeight :\"50vh\"}} src={process.env.PUBLIC_URL+\"/firefox.svg\"} fluid />\r\n        </Tab.Pane>\r\n            </Tab.Content>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Attacks;","import {BrowserRouter,Route,Switch} from 'react-router-dom';\r\nimport Navbar from './components/NavBar';\r\nimport Definition from './components/Definition';\r\nimport Exemple from './components/Exemple';\r\nimport TypeOfBruteForce from './components/TypeOfBruteForce';\r\nimport Protection from './components/Protection';\r\nimport Attacks from './components/Attacks';\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename=\"/bruteforce\">\r\n    <div className=\"App\">\r\n      <Navbar/>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Definition}/>\r\n        <Route path=\"/example\" component={Exemple}/>\r\n        <Route path=\"/Types\" component={TypeOfBruteForce}/>\r\n        <Route path=\"/attacks\" component={Attacks}/>\r\n        \r\n        <Route path=\"/protection\" component={Protection}/>\r\n      </Switch>\r\n    </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}